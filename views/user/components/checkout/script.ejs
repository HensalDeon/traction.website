<script>
  var modal = document.getElementById('addAddressModalCheckout');
  var addAddressBtn = document.getElementById('addAddressBtn');
  var closeBtn = modal.querySelector('.close');
  addAddressBtn.addEventListener('click', function() {
    modal.style.display = 'block';
  });

  closeBtn.addEventListener('click', closeModal);
  window.addEventListener('click', outsideClick);

  function closeModal() {
    modal.style.display = 'none';
  }

  function outsideClick(e) {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  }

  function deleteAddress(addressId) {

    Swal.fire({
      title: 'Delete your address!Are you sure?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, Delete!'
    }).then((result) => {
      if (result.isConfirmed) {
        const url = "/delete-address"
        fetch(url, {
          body: JSON.stringify({
            id: addressId
          }),
          method: 'delete',
          headers: {
            'Content-Type': 'application/json'
          }
        }).then((res) => {
          console.log(res);
          location.reload()
        }).catch((error) => {
          console.error(error);
        })
      }
    })

  }

  const form = document.querySelector('#addNewAddressCheckout');
  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const fnameError = document.querySelector('#fnameError');
    const lnameError = document.querySelector('#lnameError');
    const countryError = document.querySelector('#countryError');
    const billingAddressError = document.querySelector('#billingAddressError');
    const cityError = document.querySelector('#cityError');
    const stateError = document.querySelector('#stateError');
    const postError = document.querySelector('#postError');
    const phoneError = document.querySelector('#phoneError');
    const emailError = document.querySelector('#emailError');
    const addressError = document.querySelector('#addressError');



    fnameError.innerHTML = ''
    lnameError.innerHTML = ''
    countryError.innerHTML = ''
    billingAddressError.innerHTML = ''
    cityError.innerHTML = ''
    stateError.innerHTML = ''
    postError.innerHTML = ''
    phoneError.innerHTML = ''
    emailError.innerHTML = ''

    const formData = new FormData(form);

    let hasError = false;

    if (formData.get('fname').trim() === '') {
      hasError = true;
      fnameError.innerHTML += '<p style="color:red">Please enter your first name.</p>';
      setTimeout(() => {
        fnameError.innerHTML = ''
      }, 5000);
      return;
    }

    if (formData.get('lname').trim() === '') {
      hasError = true;
      lnameError.innerHTML += '<p style="color:red">Please enter your last name.</p>';
      setTimeout(() => {
        lnameError.innerHTML = ''
      }, 5000);
      return;

    }
    if (formData.get('country').trim() === '') {
      hasError = true;
      countryError.innerHTML += '<p style="color:red">Please select any country.</p>';
      setTimeout(() => {
        countryError.innerHTML = ''

      }, 5000);
      return;

    }

    if (formData.get('street_address').trim() === '') {
      hasError = true;
      billingAddressError.innerHTML += '<p style="color:red">Please enter your billing address.</p>';
      setTimeout(() => {
        billingAddressError.innerHTML = '';
      }, 5000);
      return;

    }


    if (formData.get('city').trim() === '') {
      hasError = true;
      cityError.innerHTML = '<p style="color:red">Please enter your city/town.</p>';
      setTimeout(() => {
        cityError.innerHTML = '';
      }, 5000);
      return;

    }

    if (formData.get('state').trim() === '') {
      hasError = true;
      stateError.innerHTML += '<p style="color:red">Please enter your state/province.</p>';
      setTimeout(() => {
        stateError.innerHTML = '';
      }, 5000);
      return;

    }

    if (formData.get('zipcode').trim() === '') {
      hasError = true;
      postError.innerHTML += '<p style="color:red">Please enter your postcode/ZIP code.</p>';
      setTimeout(() => {

        postError.innerHTML = '';
      }, 5000);
      return;
    }

    if (formData.get('phone').trim() === '') {
      hasError = true;
      phoneError.innerHTML += '<p style="color:red">Please enter your phone number.</p>';
      setTimeout(() => {
        phoneError.innerHTML = '';
      }, 5000);
      return;
    }

    if (formData.get('setAddressAs').trim() === '') {
      hasError = true;
      addressError.innerHTML += '<p style="color:red">Please select the adress type.</p>';
      setTimeout(() => {
        addressError.innerHTML = ''

      }, 5000);
      return;

    }

    if (formData.get('email').trim() === '') {
      hasError = true;
      emailError.innerHTML += '<p style="color:red">Please enter your email address.</p>';
      setTimeout(() => {
        emailError.innerHTML = '';
      }, 5000);
      return;

    }

    if (!hasError) {

      const formObject = {};
      formData.forEach(function(value, key) {
        formObject[key] = value;
      });

      const url = '/add-address';
      fetch(url, {
          method: 'POST',
          body: JSON.stringify(formObject),
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(async (response) => {
          console.log(response);
          const msg = await response.json()
          console.log(msg);
          if (msg.message) {
            if (msg.message.includes('fname')) {
              msg.error = 'Please enter a first name';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('lname')) {
              msg.error = 'Please enter a last name';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('street_address')) {
              msg.error = 'Please enter a street address';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('city')) {
              msg.error = 'Please enter a city';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('state')) {
              msg.error = 'Please enter  a state';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('zipcode')) {
              msg.error = 'Please enter a valid  zip code';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('country')) {
              msg.error = 'Please select a valid country';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('phone')) {
              msg.error = 'Please enter a valid phone number';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('email')) {
              msg.error = 'Please enter a valid email address';
              callAlert(msg.error)
              return;
            }
            if (msg.message.includes('setAddressAs')) {
              msg.error = 'Please select a valid address type';
              callAlert(msg.error)
              return;
            }

          }

          function callAlert(errorMessage) {
            Swal.fire({
              title: 'Oops!',
              icon: 'error',
              text: 'Something went wrong!' + errorMessage,
              showCloseButton: true,
            })
          }
          window.location.reload();
        })
        .catch(error => {
          console.error(error);
        });

    }
  });

  function editAddress(addressId) {
    console.log('/////');
    // Get the modal element
    var editModal = document.getElementById('editAddressModal');

    // Get the <span> element that closes the modal
    var closeEditBtn = editModal.querySelector('.close');

    // Close the modal when the close button or outside the modal is clicked
    closeEditBtn.addEventListener('click', closeEditModal);
    window.addEventListener('click', outsideEditClick);

    function closeEditModal() {
      editModal.style.display = 'none';
    }

    function outsideEditClick(e) {
      if (e.target === editModal) {
        editModal.style.display = 'none';
      }
    }
    // Fetch the address data based on addressId
    const url = "/get-address";
    fetch(url, {
        method: 'POST',
        body: JSON.stringify({
          id: addressId
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        return response.json()
      })
      .then(addressData => {
        console.log(addressData);
        // Populate the edit form fields with the address data
        const editForm = document.getElementById('editAddressForm');

        editForm.fname.value = addressData.address.fname;
        editForm.lname.value = addressData.address.lname;
        editForm.street_address.value = addressData.address.street_address;
        editForm.city.value = addressData.address.city;
        editForm.zipcode.value = addressData.address.zipcode;
        editForm.state.value = addressData.address.state;
        editForm.phone.value = addressData.address.phone;
        editForm.email.value = addressData.address.email;
        editForm.setAddressAs.value = addressData.address.isShippingAddress ? 'isShippingAddress' : 'isBillingAddress';

        const countrySelect = document.getElementById('countrySelect');
        const addressCountry = addressData.address.country;
        const existingOption = Array.from(countrySelect.options).find(option => option.value === addressCountry);

        if (existingOption) {
          existingOption.selected = true;
        } else {
          const addressCountryOption = new Option(addressCountry, addressCountry, true, true);
          countrySelect.add(addressCountryOption, 0);
        }
        const setAddressAsSelect = document.getElementById('addressType');
        setAddressAsSelect.innerHTML = '';
        const billingOption = document.createElement('option');
        billingOption.value = 'isBillingAddress';
        billingOption.text = 'Billing Address';
        setAddressAsSelect.appendChild(billingOption);

        // Create the "Shipping Address" option
        const shippingOption = document.createElement('option');
        shippingOption.value = 'isShippingAddress';
        shippingOption.text = 'Shipping Address';
        setAddressAsSelect.appendChild(shippingOption);

        // Set the selected option based on the address type
        if (addressData.address.isShippingAddress) {
          setAddressAsSelect.value = 'isShippingAddress';
        } else {
          setAddressAsSelect.value = 'isBillingAddress';
        }
        // Open the modal
        editModal.style.display = 'block';
      })
      .catch(error => {
        console.error(error);
      });


    const editForm = document.getElementById('editAddressForm');
    editForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const fnameErrors = document.querySelector('#fnameErrors');
      const lnameErrors = document.querySelector('#lnameError');
      const countryErrors = document.querySelector('#countryErrors');
      const billingAddressErrors = document.querySelector('#billingAddressErrors');
      const cityErrors = document.querySelector('#cityErrors');
      const stateErrors = document.querySelector('#stateErrors');
      const postErrors = document.querySelector('#postErrors');
      const phoneErrors = document.querySelector('#phoneErrors');
      const emailErrors = document.querySelector('#emailErrors');
      const addressErrors = document.querySelector('#addressErrors');


      fnameErrors.innerHTML = ''
      lnameErrors.innerHTML = ''
      countryErrors.innerHTML = ''
      billingAddressErrors.innerHTML = ''
      cityErrors.innerHTML = ''
      stateErrors.innerHTML = ''
      postErrors.innerHTML = ''
      phoneErrors.innerHTML = ''
      emailErrors.innerHTML = ''

      const formData = new FormData(editForm);

      let hasError = false;
      if (formData.get('fname').trim() === '') {
        console.log('name error');
        hasError = true;
        fnameErrors.innerHTML = '<p style="color:red">Please enter your first name.</p>';
        setTimeout(() => {
          fnameErrors.innerHTML = ''
        }, 5000);
        return;
      }

      if (formData.get('lname').trim() === '') {
        hasError = true;
        lnameErrors.innerHTML = '<p style="color:red">Please enter your last name.</p>';
        setTimeout(() => {
          lnameErrors.innerHTML = ''
        }, 5000);
        return;

      }
      if (formData.get('country').trim() === '') {
        hasError = true;
        countryErrors.innerHTML = '<p style="color:red">Please select any country.</p>';
        setTimeout(() => {
          countryErrors.innerHTML = ''

        }, 5000);
        return;

      }

      if (formData.get('street_address').trim() === '') {
        hasError = true;
        billingAddressErrors.innerHTML = '<p style="color:red">Please enter your billing address.</p>';
        setTimeout(() => {
          billingAddressErrors.innerHTML = '';
        }, 5000);
        return;

      }

      if (formData.get('city').trim() === '') {
        hasError = true;
        cityErrors.innerHTML = '<p style="color:red">Please enter your city/town.</p>';
        setTimeout(() => {
          cityErrors.innerHTML = '';
        }, 5000);
        return;

      }

      if (formData.get('state').trim() === '') {
        hasError = true;
        stateErrors.innerHTML = '<p style="color:red">Please enter your state/province.</p>';
        setTimeout(() => {
          stateErrors.innerHTML = '';
        }, 5000);
        return;

      }
      
      if (formData.get('zipcode').trim() === '') {
        hasError = true;
        postErrors.innerHTML = '<p style="color:red">Please enter your postcode/ZIP code.</p>';
        setTimeout(() => {

          postErrors.innerHTML = '';
        }, 5000);
        return;

      }

      if (formData.get('phone').trim() === '') {
        hasError = true;
        phoneErrors.innerHTML = '<p style="color:red">Please enter your phone number.</p>';
        setTimeout(() => {
          phoneErrors.innerHTML = '';
        }, 5000);
        return;
      }

      if (formData.get('setAddressAs').trim() === '') {
        hasError = true;
        addressErrors.innerHTML = '<p style="color:red">Please select the adress type.</p>';
        setTimeout(() => {
          addressErrors.innerHTML = ''

        }, 5000);
        return;

      }

      if (formData.get('email').trim() === '') {
        hasError = true;
        emailErrors.innerHTML = '<p style="color:red">Please enter your email address.</p>';
        setTimeout(() => {
          emailErrors.innerHTML = '';
        }, 5000);
        return;

      }
      if (!hasError) {
        const formObject = {};
        formData.forEach(function(value, key) {
          formObject[key] = value;
        });
        console.log(formObject,'//////');
        const url = "/update-address";
        fetch(url, {
            method: 'POST',
            body: JSON.stringify({
              id: addressId,
              addressData: formObject
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (response.ok) {
              console.log('success');
              // Address updated successfully
              Swal.fire({
                icon: 'success',
                title: 'Address Updated',
                text: 'The address has been successfully updated.',
              }).then(() => {
                closeEditModal();
                window.location.reload()
              });
            } else {
              console.log('failure');
              // Failed to update the address
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to update the address.',
              });
            }
          })
          .catch(error => {
            console.error(error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while updating the address.',
            });
          });
      }
    });
  }
</script>