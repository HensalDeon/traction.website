<style>
  .image_container {
    position: relative;
    border: 2px solid #ddd;
    border-radius: 2px;
    overflow: hidden;
  }

  .edit-icon {
    position: absolute;
    left: 90% !important;
    top: 70% !important;
    transform: translateX(-50%) scaleX(-1);
    font-size: 18px !important;
    color: rgb(255, 255, 255) !important;
    cursor: pointer;
    background-color: rgb(0, 0, 0);
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: flex;
    justify-content: center;
    align-items: center;

  }

  .delete-icon {
    position: absolute;
    top: 4% !important;
    left: 83% !important;
    cursor: pointer;
    background-color: rgb(255, 255, 255);
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>

<section class="content-main">
  <form id="myForm">
    <div class="row">
      <div class="col-9">
        <div class="content-header">
          <h2 class="content-title">Edit Product</h2>

        </div>
      </div>
      <div class="col-lg-12">
        <div class="card mb-4">
          <div class="card-body">
            <div class="mb-4">
              <span id="productId" data-productId="<%= product._id %>" hidden></span>
              <label for="productName" class="form-label">Product title</label>
              <input type="text" value="<%-  product.productName %>" class="form-control" id="productName"
                name="productName" required>
            </div>
            <div class="mb-4">
              <label class="form-label">Full description</label>
              <textarea class="form-control" rows="4" id="productDescription" name="productDescription"
                required><%- product.productDescription %></textarea>
            </div>
            <div class="row">
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Regular price</label>
                  <div class="row gx-2">
                    <input value="<%- product.productPrice %>" type="text" class="form-control" id="productPrice"
                      name="productPrice" required>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Old price</label>
                  <input placeholder="â‚¹" value="<%-  product.productOldPrice %> " type="text" class="form-control"
                    id="productOldPrice" name="productOldPrice" required>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Stocks</label>
                  <input value="<%-  product.stocks %>" type="text" class="form-control" id="stocks" name="stocks"
                    required>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="row gx-2">
                <div class="col-sm-6 mb-3">
                  <label class="form-label">Category</label>
                  <select class="form-select" name="productCategory" id="productCategory" required>
                    <% categories.forEach(category=> { %>

                      <% if(category.name === product?.productCategory?.name ) { %>
                       <option selected value="<%= category._id %>"><%= category.name %> %></option>
                       <% } %>

                      <% if(category.active && category.name != product?.productCategory?.name ) { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                      <% } %>
                    <% }); %>
                  </select>
                  
                </div>
              </div>
            </div>

            <div class="container mt-3 w-100">
              <div class="card shadow-sm w-100">
                <div class="card-body d-flex justify-content-between">
                  <label>
                    <h4>Images</h4>
                  </label>
                  <input required onchange="imageSelect()" class="d-none" type="file" name="productImage" id="productImage" multiple>
                  <button type="button" class="btn btn-sm btn-info" onclick="document.getElementById('productImage').click()">Add
                    images</button>
                </div>
                <div class="card-body d-flex flex-wrap justify-content-start" id="image-preview">
                  <!-- Images loaded from backend -->
                  <% product.productImageUrls.forEach((imageurl, index) => { %>
                  <div class="image_container d-flex justify-content-center position-relative">
                    <img src="<%= imageurl %>" alt="img">
                    <span class="position-absolute delete-icon" onclick="deleteImage(event, '<%= index %>')">&times;</span>
                    <span class="position-absolute edit-icon" onclick="changeImage(event, '<%= index %>')">&#9998;</span>
                  </div>
                  <% }); %>
                </div>
              </div>
            </div>
            
            <div>
              <button type="submit" id="update-product-btn" class="btn btn-md rounded font-sm hover-up">Update</button>
            </div>

          </div>
        </div>
      </div>
    </div>
  </form>
</section>


<script>
document.getElementById('update-product-btn').addEventListener('click', (event) => {
  event.preventDefault();

  const imageInput = document.getElementById('productImage');
  const selectedImages = imageInput.files;

  const form = document.getElementById('myForm');
  const formData = new FormData(form);

  const productId = document.getElementById('productId').getAttribute('data-productId')
  formData.delete('productImage');
  formData.append('productId',productId);

  for (let i = 0; i < selectedImages.length; i++) {
    formData.append('productImage', selectedImages[i]);
  }
  
  const url = '/admin/edit-product'

  axios
    .put(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    .then((response) => {
      if(response.data.success){
        callAlertify('success',response.data.message)
        window.location.href = '/admin/products';
      }else{
        callAlertify('error',response.data.message)
      }
    })
    .catch((error) => {
     if(error.response.status === 400){
       callAlertify('error', error.response.data.message);
    }else{
       callAlertify('error', 'something wrong internal server error');
     }
      console.error('Error adding product:', error);
    });
  
});

  var uploadedImages = [];

  function loadImagesFromBackend(productId) {
    fetch(`/admin/getProductImages/${productId}`,{
      method:'get'
    })
      .then(response => response.json())
      .then(data => {
        
        uploadedImages = data.productImageUrls;
        displayImages();
      })
      .catch(error => console.error(error));

    displayImages();
  }

  // Function to display the uploaded images
  function displayImages() {
    var previewContainer = document.getElementById('image-preview');
    previewContainer.innerHTML = '';
    
    uploadedImages.forEach((imageUrl, index) => {
      var imageContainer = document.createElement('div');
      imageContainer.className = 'image_container d-flex justify-content-center position-relative';

      var image = document.createElement('img');
      image.src = imageUrl;
      image.alt = 'img';

      var deleteIcon = document.createElement('span');
      deleteIcon.className = 'position-absolute delete-icon';
      deleteIcon.innerHTML = '&times;';
      deleteIcon.addEventListener('click', function () {
        deleteImage(index);
      });

      var editIcon = document.createElement('span');
      editIcon.className = 'position-absolute edit-icon';
      editIcon.innerHTML = '&#9998;';
      editIcon.addEventListener('click', function () {
        changeImage(index);
      });

      imageContainer.appendChild(image);
      imageContainer.appendChild(deleteIcon);
      imageContainer.appendChild(editIcon);

      previewContainer.appendChild(imageContainer);
    });
  }

  // Function to handle image selection
  function imageSelect() {
    var fileInput = document.getElementById('productImage');
    var files = fileInput.files;

    for (var i = 0; i < files.length; i++) {
      var file = files[i];
      var reader = new FileReader();

      reader.onload = function (event) {
        var imageUrl = event.target.result;
        uploadedImages.push(imageUrl);
        displayImages();
      };

      reader.readAsDataURL(file);
    }
  }

  // Function to delete an image
  function deleteImage(index) {
    uploadedImages.splice(index, 1);
    displayImages();
  }

  // Function to change an image
  function changeImage(index) {
    var fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    fileInput.style.display = 'none';
    fileInput.addEventListener('change', function (event) {
      var file = event.target.files[0];
      var reader = new FileReader();

      reader.onload = function (event) {
        var imageUrl = event.target.result;
        uploadedImages[index] = imageUrl;
        displayImages();
      };

      reader.readAsDataURL(file);
    });

    fileInput.click();
  }

  const productId = document.getElementById('productId');
  let product = productId.getAttribute('data-productId');
  loadImagesFromBackend(product);

  
</script>





<!-- <script>

let images = []; 

// Function to handle image selection
function imageSelect() {
  const imageInput = document.getElementById('productImage');
  const selectedImages = imageInput.files;

  if (images.length + selectedImages.length > 4) {
    callAlertify('error', `You can only select 4 images`);
    imageInput.value = '';
    return;
  }

  // Iterate over selected images and add them to the images array
  for (let i = 0; i < selectedImages.length; i++) {
    const file = selectedImages[i];
    const url = URL.createObjectURL(file);
    if (checkDuplicate(file.name)) {
      images.push({
        name: file.name,
        url: url,
        file: file,
      });
    } else {
      callAlertify('warning', `${file.name} is already added`);
    }
  }

  updateImagePreview(); // Update the image preview
}

// Function to update the image preview
function updateImagePreview() {
  console.log(images);
  const imagePreviewContainer = document.getElementById('image-preview');
  imagePreviewContainer.innerHTML = '';

  images.forEach((image, index) => {
    const imageContainer = document.createElement('div');
    imageContainer.className = 'image_container d-flex justify-content-center position-relative';

    const imgElement = document.createElement('img');
    imgElement.src = image.url;
    imgElement.alt = 'img';

    const deleteIcon = document.createElement('span');
    deleteIcon.className = 'position-absolute delete-icon';
    deleteIcon.innerHTML = '&times;';
    deleteIcon.addEventListener('click', () => deleteImage(index));

    const editIcon = document.createElement('span');
    editIcon.className = 'position-absolute edit-icon';
    editIcon.innerHTML = '&#9998;';
    editIcon.addEventListener('click', () => changeImage(index));

    imageContainer.appendChild(imgElement);
    imageContainer.appendChild(deleteIcon);
    imageContainer.appendChild(editIcon);

    imagePreviewContainer.appendChild(imageContainer);
  });
}

// Function to delete an image from the images array
function deleteImage(index) {
  images.splice(index, 1);
  updateImagePreview();
}

// Function to check for duplicate image name in the images array
function checkDuplicate(name) {
  for (let i = 0; i < images.length; i++) {
    if (images[i].name === name) {
      return false; // Duplicate found
    }
  }
  return true; // No duplicate found
}

// Function to handle image change (edit)
function changeImage(index) {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.addEventListener('change', (event) => handleImageChange(event, index));
  input.click();
}

// Function to handle the file selection when editing an image
function handleImageChange(event, index) {
  const file = event.target.files[0];
  const url = URL.createObjectURL(file);

  images[index] = {
    name: file.name,
    url: url,
    file: file,
  };

  updateImagePreview();
}

// Function to handle form submission (update button)
function handleFormSubmit() {
 console.log('hi');
}

// Add an event listener to the update button
const updateBtn = document.getElementById('update-product-btn');
updateBtn.addEventListener('click', handleFormSubmit);

</script> -->
